{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","initMap","fetchRestaurantFromURL","error","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","getElementById","innerHTML","address","image","className","urlPath","imageUrlForRestaurant","img1x","img2x","srcset","src","alt","cuisine","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","longDay","append","shortDay","slice","appendChild","time","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","date","rating","comments","breadcrumb","url","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","sourcesContent":["let restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\ninitMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1IjoiZmV3aWxjb3gzIiwiYSI6ImNqaW02aW0yZjAwdnczdnBsMXp2b2ZnaDUifQ.dzh4ddbDJD8gPCYe3x9j8g',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'\n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}\n\n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  const urlPath = DBHelper.imageUrlForRestaurant(restaurant);\n  const img1x = urlPath + '-1x.jpg';\n  const img2x = urlPath + '-2x.jpg';\n  image.srcset = `${img1x} 1x, ${img2x} 2x`;\n  image.src = img1x;\n  image.alt = restaurant.name + ' provided stock image';\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    //day.innerHTML = key;\n\n    const longDay = document.createElement('span');\n    longDay.className = 'long-day';\n    longDay.innerHTML = key;\n    day.append(longDay);\n\n    const shortDay = document.createElement('span');\n    shortDay.className = 'short-day';\n    shortDay.innerHTML = key.slice(-9, 3) + '.';\n    day.append(shortDay);\n\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h2');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('h3');\n  name.innerHTML = review.name;\n  name.className = 'review-name';\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  date.className = 'review-date';\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  rating.className = 'review-rating';\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"],"file":"restaurant_info.js"}