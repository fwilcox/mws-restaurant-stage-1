{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","DATABASE_URL","port","fetchRestaurants","callback","xhr","XMLHttpRequest","open","onload","status","json","JSON","parse","responseText","restaurants","error","send","fetchRestaurantById","id","restaurant","find","r","fetchRestaurantByCuisine","cuisine","results","filter","cuisine_type","fetchRestaurantByNeighborhood","neighborhood","fetchRestaurantByCuisineAndNeighborhood","fetchNeighborhoods","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","fetchCuisines","cuisines","uniqueCuisines","urlForRestaurant","imageUrlForRestaurant","photograph","slice","mapMarkerForRestaurant","marker","L","latlng","lat","lng","title","name","alt","url","addTo","newMap"],"mappings":"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","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', DBHelper.DATABASE_URL);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const json = JSON.parse(xhr.responseText);\r\n        const restaurants = json.restaurants;\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n   // TODO: Hacky need to find a more permanent solution\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph.slice(0,-4)}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker\r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n"],"file":"dbhelper.js"}