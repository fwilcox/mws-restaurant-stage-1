{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","newMap","markers","document","addEventListener","event","initMap","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","L","map","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","marker","remove","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","urlPath","imageUrlForRestaurant","img1x","img2x","srcset","src","alt","name","div","address","more","href","urlForRestaurant","onClick","window","location","mapMarkerForRestaurant","on","options","url","push"],"mappings":"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","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap(); // added\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 11,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoiZmV3aWxjb3gzIiwiYSI6ImNqaW02aW0yZjAwdnczdnBsMXp2b2ZnaDUifQ.dzh4ddbDJD8gPCYe3x9j8g',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  const urlPath = DBHelper.imageUrlForRestaurant(restaurant);\r\n  const img1x = urlPath + '-1x.jpg';\r\n  const img2x = urlPath + '-2x.jpg';\r\n  image.srcset = `${img1x} 1x, ${img2x} 2x`;\r\n  image.src = img1x;\r\n  image.alt = restaurant.name + ' provided stock image';\r\n  li.append(image);\r\n\r\n  const div = document.createElement('div');\r\n  div.className = 'restaurants-info';\r\n  li.append(div);\r\n\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  div.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  div.append(neighborhood);\r\n\r\n  const address = document.createElement('address');\r\n  address.className = 'restaurant-add'\r\n  address.innerHTML = restaurant.address;\r\n  div.append(address);\r\n\r\n  const more = document.createElement('button');\r\n  more.className = 'detail-button';\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.addEventListener('click', onClick);\r\n  function onClick() {\r\n    window.location.href = more.href;\r\n  };\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n\r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\r\n"],"file":"main.js"}